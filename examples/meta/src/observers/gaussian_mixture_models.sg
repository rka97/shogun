File f_feats_train = csv_file("../../data/classifier_4class_2d_linear_features_train.dat")

Math:init_random(1)

#![create_features]
Features features_train = features(f_feats_train)
#![create_features]

#![create_gmm_instance]
int num_components = 3
Distribution gmm = distribution("GMM", components=num_components)
#![create_gmm_instance]

#![add_observer]
ParameterObserver obs = parameter_observer("ParameterObserverLogger")
gmm.subscribe(obs)
#![add_observer]

#![train_sample]
gmm.put("features", features_train)
gmm.put("training_algorithm", enum GMMAlgorithm.EM)
gmm.train()
RealVector output = gmm.sample()
#![train_sample]

#![training_smem]
gmm.unsubscribe(obs)
ParameterObserver obs_smem = parameter_observer("ParameterObserverLogger")
gmm.subscribe(obs_smem)
gmm.put("training_algorithm", enum GMMAlgorithm.SMEM)
gmm.train()
#![training_smem]

#![extract_coeff]
int num_observations = obs.get_int("num_observations")
ObservedValue obs_val = obs.get_observation(num_observations-2)
RealVector observed_coeff =  obs_val.get_real_vector("coefficients")
RealVector coeff = gmm.get_real_vector("coefficients")
#![extract_coeff]

#![extract_likelihood]
ObservedValue obs_val_2 = obs.get_observation(num_observations-3)
real log_likelihood = obs_val_2.get_real("log_likelihood")
#![extract_likelihood]
